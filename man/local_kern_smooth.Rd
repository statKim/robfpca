% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IRLScpp.R
\name{local_kern_smooth}
\alias{local_kern_smooth}
\title{Local polynomial kernel smoothing with huber loss (mean estimator)}
\usage{
local_kern_smooth(
  Lt,
  Ly,
  newt = NULL,
  method = c("L2", "HUBER", "WRM", "BISQUARE"),
  bw = NULL,
  deg = 1,
  ncores = 1,
  kernel = "epanechnikov",
  k2 = 1.345,
  ...
)
}
\arguments{
\item{Lt}{a list of vectors or a vector containing time points for all curves}

\item{Ly}{a list of vectors or a vector containing observations for all curves}

\item{newt}{a vector containing time points to estimate}

\item{method}{"Huber" or "WRM" or "Bisquare"}

\item{bw}{bandwidth}

\item{deg}{a degree of polynomial}

\item{ncores}{number of cores for k-fold cross-validation}

\item{kernel}{a kernel function for kernel smoothing ("epan", "gauss" are supported.)}

\item{k2}{cut-off value for Huber function
For loss = "Huber", it uses \code{rlm()} in \code{MASS} and fits the robust regression with Huber loss.
So additional parameters of \code{rlm()} can be applied. (k2, maxit, ...)}

\item{...}{additional parameters}
}
\value{
a smoothed vector
}
\description{
Robust local polynomial smoothing via Huber function using iteratively re-weighted least sqruares (IRLS) algorithm
}
