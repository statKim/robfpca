% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCA.R
\name{funPCA}
\alias{funPCA}
\title{Functional Principal Component Analysis (FPCA) via Conditional Expectation}
\usage{
funPCA(Lt, Ly, mu, cov, sig2 = 0, work.grid = NULL, K = NULL, PVE = 0.99)
}
\arguments{
\item{Lt}{a list of vectors or a vector containing time points for all curves}

\item{Ly}{a list of vectors or a vector containing observations for all curves}

\item{mu}{a mean function estimated at work.grid}

\item{cov}{a covariance function estimated at work.grid}

\item{sig2}{a noise variance}

\item{work.grid}{a work grid}

\item{K}{a number of FPCs. If K is NULL, K is selected by PVE.}

\item{PVE}{a proportion of variance explained}
}
\value{
a list contatining as follows:
\item{data}{a list containing Lt and Ly}
\item{lambda}{the first K eigenvalues}
\item{eig.fun}{the first K eigenvectors}
\item{pc.score}{the first K FPC scores}
\item{K}{a number of FPCs}
\item{PVE}{a proportion of variance explained}
\item{work.grid}{a work grid}
\item{eig.obj}{an object of the eigenanalysis}
\item{mu}{a mean function}
\item{cov}{a covariance function}
\item{sig2}{a noise variance}
}
\description{
FPCA is performed via PACE (Principal Analysis via Conditional Expectation) proposed by Yao et al. (2005).
}
\examples{
### Generate example data
set.seed(100)
x.list <- sim_delaigle(n = 100,
                       type = "partial",
                       out.prop = 0.2,
                       dist = "normal")
x <- list2matrix(x.list)

### Estimate robust covariance function
work.grid <- seq(0, 1, length.out = 51)
cov.obj <- cov_ogk(x,
                   type = "huber",
                   bw = 0.1)

### Functional principal component analysis
fpca.obj <- funPCA(Lt = x.list$Lt,
                   Ly = x.list$Ly,
                   mu = cov.obj$mean,
                   cov = cov.obj$cov,
                   work.grid = work.grid,
                   PVE = 0.95)
fpc.score <- fpca.obj$pc.score

# ### Give same result in the above
# fpca.obj <- robfpca.partial(x,
#                             type = "huber",
#                             PVE = 0.95,
#                             bw = 0.1)
# fpc.score <- fpca.obj$pc.score

}
